~~
~~ The Maven Unit- and Integration Test Guide (MaUI for short)
~~
~~ Copyright (c) 2011 by SoftwareEntwicklung Beratung Schulung (SoEBeS)
~~ Copyright (c) 2011 by Karl Heinz Marbaise
~~
~~ Licensed to the Apache Software Foundation (ASF) under one or more
~~ contributor license agreements.  See the NOTICE file distributed with
~~ this work for additional information regarding copyright ownership.
~~ The ASF licenses this file to You under the Apache License, Version 2.0
~~ (the "License"); you may not use this file except in compliance with
~~ the License.  You may obtain a copy of the License at
~~
~~    http://www.apache.org/licenses/LICENSE-2.0
~~
~~ Unless required by applicable law or agreed to in writing, software
~~ distributed under the License is distributed on an "AS IS" BASIS,
~~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
~~ See the License for the specific language governing permissions and
~~ limitations under the License.
~~

 ------
 Maven Plugin Integration Test Code Example
 ------
 Karl Heinz Marbaise
 ------
 3. April 2011
 ------

Maven Plugin Development

* Integration Test Code Example

  In this example we will implement a very simple Maven Plugin which will
  printout some information about the current project. This results
  in the following layout of the project.

+--------
.
|-- pom.xml
`-- src
    `-- main
        `-- java
            `-- com
                `-- soebes
                    `-- maven
                        `-- plugins
                            `-- mlv
                                `-- IntegrationTestMojo.java
+--------

  The code of the Mojo (IntegrationTestMojo.java) is very simple and looks like the following:

+--------
/**
 *
 * @goal verify
 * @phase prepare-package
 */
public class IntegrationTestMojo extends AbstractMojo
{
    /**
     * The Maven Project Object
     *
     * @parameter default-value="${project}"
     * @readonly
     */
    private MavenProject project;

    /**
     * @parameter default-value="${localRepository}"
     */
    private ArtifactRepository localRepository;

    /**
     * List of Remote Repositories used by the resolver
     *
     * @parameter default-value="${project.remoteArtifactRepositories}"
     * @readonly
     */
    private List<ArtifactRepository> remoteRepositories;

    /**
     * @parameter default-value="${settings}"
     */
    private Settings settings;

    /**
     * This will turn on verbose behavior and will print out
     * all information about the artifacts.
     *
     * @parameter expression="${verbose}" default-value="false"
     */
    private boolean verbose;

    public void execute()
        throws MojoExecutionException
    {
        if (isVerbose()) {
            getLog().info("This is an output in verbose mode");
        }

        getLog().info("groupId:" + project.getGroupId());
        getLog().info("artifactId:" + project.getArtifactId());
        getLog().info("artifactId:" + project.getVersion());

        getLog().info("name:" + project.getName());
        getLog().info("description:" + project.getDescription());
        getLog().info("file: " + project.getFile());

        getLog().info("Active profiles:");
        for (String profile : settings.getActiveProfiles()) {
            getLog().info("profile: " + profile);
        }

        if (isVerbose()) {
            getLog().info("-- Local Repository --");
            getLog().info("Id:" + localRepository.getId());
            getLog().info("baseDir:" + localRepository.getBasedir());
            getLog().info("key:" + localRepository.getKey());
            getLog().info("Url:" + localRepository.getUrl());

            getLog().info("-- Remote Repositories --");
            for (ArtifactRepository ar : remoteRepositories) {
                getLog().info("Id:" + ar.getId());
                getLog().info("baseDir:" + ar.getBasedir());
                getLog().info("key:" + ar.getKey());
                getLog().info("Url:" + ar.getUrl());
            }
        }
    }

    public void setVerbose(boolean verbose) {
        this.verbose = verbose;
    }

    public boolean isVerbose() {
        return verbose;
    }

}
+--------

  The mojo will be executed and will printout some information about the current
  project in this case the groupId, artifactId etc.

  The pom.xml for the Maven plugin looks like this. This excerpt contains only
  the relevant parts.

+--------
<project..>
  [...]
  <packaging>maven-plugin</packaging>
  [...]
  <build>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>2.8</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-report-plugin</artifactId>
        <version>2.8</version>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>2.3.1</version>
        <configuration>
          <source>1.5</source>
          <target>1.5</target>
          <debug>false</debug>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-plugin-plugin</artifactId>
        <version>2.7</version>
        <executions>
          <execution>
            <id>generated-helpmojo</id>
            <goals>
              <goal>helpmojo</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

  <dependencies>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <version>${mavenVersion}</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-project</artifactId>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings</artifactId>
      <version>${mavenVersion}</version>
    </dependency>
  </dependencies>
</project>
+--------


  []

